SYNTAX:

class ==> 

{public/default} {abstract/final --if needed} class/interface {class_name} {....... }

abstract/final --> not needed for interface


variable ==> 

{public/default/protected/private} {transient - if needed} {volatile/final --if needed} {static --if needed} {datatype} {variable_name} = {value} ;

transient --> marking a variable as transient indicates that it should not be serialized.
             serialization --> persistence, networking, distributed systems, caching, JMS & message brokers.
volatile  --> to indicate that a variable's value will be modified by different threads. (change in one thread is visible to all threads)

method ==>

{public/default/protected/private} {abstract/final --if needed} {static --if needed} {synchronized -- if needed} {return type --> void & others} {method_name} (parameters ...any number) { ... }


NAMING CONVENTION:

DATATYPE :

1.How bit level datatype consumes memory.
2. byte has range of 2^7-1 to -2^7 . If exceeds we have to cast explicitly and it may leads to overflow / underflow.
3. other datatypes their range based on memory they take. char has only range of 0 - 65535.
4. byte --> short --> int <-- long (but with casting) 
                      int --> float --> double 
                      long --> float --> double
5. by default whole number will be int & decimal number will be double.
6. we use f/F , d/D, l/L for proper identification.
7. If the value is out of range it will come to negative range (like rotation)
8. we can use large numbers like 2_147_483_647.

EXECUTION ORDER :

static block --> main method --> non-static block (executed at every object creation)--> non-static method / static method (based on calling order).

static block -->initialize static variables or perform one-time actions when the class is loaded

non -static block --> called everytime when a new object created.

VARIABLE TYPES:

1.Instance Variable:
     different for each object.
     initialization not mandatory.(default value applied)
     created along with its object and destroyed along with its object.
2.Static variable:
     only difference is static keyword & this is common for all object.
     if changed through one object it'll be reflected in all objects.
3.Local/ method variable:
     initialization is mandatory.
     local to method/constructor/block. cant be accessed outside unless passed/ returned from a method.
     only default AM / final permitted.

if we need to call NON-STATIC in STATIC method we need object.

AM :

public --> visible to all classes.
default --> visible to classes under same package.
protected --> visible to only inherited classes.
private --> visible to only that class.

IMPORTANT KEYWORDS STATIC / FINAL / SUPER / THIS:

STATIC : ( class, method , variable , block )

1. static can be used in nested class (class inside class)
2. If we use static it belongs to the class.
3. We can't use static/final keyword with constructor.
4. we can't override static/final/private method.
5. static can be used in object creation in case of singleton pattern.(static Obj j = new Obj(); )

FINAL : (class , method , variable) 

1. final class can't be inherited.
2. final method can't be overridden
3. final variable can't be changed. variable cannot be modified after it has been initialized. (IMMUTABLE)
4. final variable can't have setter method.
5. final doesn't support block.

final var --> Used for constants that are specific to "each object instance" and remain unchanged after initialization.
              (can be initialized for each object using a constructor. that's why this differs from static final)
static final var --> Used for constants that are associated with the class itself and are shared across "all instances".

SUPER : (INHERITANCE)

1. can't use inside super in static content/ overridden methods.
2. constructor call must be the first statement in constructor. (using super)

3. can be used to call variable of parent class (super.parentClassVariable .. both static & non-static) (but static should be accessed only with class name)
4. can be used to call method of parent class (super.parentClassMethod .. both static & non-static) (but static should be accessed only with class name)
    (If parent's method not implemented in child class no need to use super)
5. Can call parent's constructor with its param.(can be called only from child constructor)

THIS : (ENCAPSULATION)

1.to refer instance(non-static) variable in current class. (but static should be accessed only with class name)
2.this(....params) to call current class matching constructor.
3.this can be used to refer "current class Instance". (use -> method chaining)
4.the previous one can be passed as argument to another method which have (Class objName) as Parameter.
5.this can be used to call current class method with matching params.
6.this can be used to call current class non static method.

7. constructor call must be the first statement in constructor. (using this)
8. cant use with static content.


INHERITANCE: (encourages polymorphism)

* All classes by default extends Object class.
* types --> single, multilevel, hierarchical.
* 1 Java doesn't support multiple inheritance (DIAMOND PROBLEM) . solved with interface.
* In case of Interface method as private, static, default we can't override it.
* In normal classes , private cant be overrided. other methods can have equal or greater visibility.
  
   protected --> protected, default, public.
   default --> default, public.
   public --> public.

* child class object can access all methods from parent class.
* If A a = new C(); , In this, instance of C is created and with this we can access all methods of the classes (A, B, C)
* If Instance created for A only its method can be accessed. If instance created for B methods of A & B can be accessed.
* IF we create B b =(B) new A(); JVM will throw ClassCastException. B is a subset of A. so it will think B can't be initialized with A object.  
* A final class can't be subclassed.

CONSTRUCTOR:

*Objective to initialize the value.
*name as class and should not have a return type.
*first line of constructor must be either super() or this();
*If we have explicit constructor with param in parent class, we need to use super with req params.
*default super() will be supplied to constructor.


POLYMORPHISM:

* Types : compile-time polymorphism (overloading) | runtime polymorphism (overriding)
* overloading --> same method name & different parameters
* overriding --> class must be inherited, same method signature.
* final/static/private method cant be overrided.
* methods can have equal or greater visibility.

ENCAPSULATION:

* Encapsulation is the mechanism of restricting access to certain components of an object and only exposing a controlled interface to the outside world.

* Benefits of Encapsulation

Data Hiding: Only necessary information is exposed, while the implementation details remain hidden.This reduces the complexity of the code.
Security: Protects an objectâ€™s state by controlling the access and modification of its fields.
Flexibility and Maintainability: Changes to the encapsulated code can be made independently without affecting other parts of the program.
Improved Code Reusability: Encapsulated code can be reused more easily as it is modular and self-contained.

* How to Achieve Encapsulation in Java

Private Fields: Declare the class fields (variables) as private to restrict direct access from outside the class.

Public Methods: Provide public getter and setter methods to allow controlled access and modification of the fields.


ABSTRACTION:

ABSTRACT CLASS:

*can't create object. To create object must be inherited. (interface dont have constructor)
*can have both abstract method and concrete method.
*static & final keyword never comes with abstract method.
*abstract methods must be declared not defined.
*abstract methods must be overriden.
*variable can't be abstract.
*can have static and non static block.
*If child class of abstract class is final, then you can't add new abstract method.


INTERFACE:

*Can't have an object. To create object must be inherited. (interface dont have constructor)
*default methods only allowed in interfaces. If it is overridden , it's AM should be public.
*we can use private / static / default method to implement some logic in interface itself.
*all methods are public abstract.
*all variables are public static final.
*can't have static and non static block.


**INBUILD CLASSES** : 

*By default java.lang package will be imported (implicitly)
*Other packages we're importing it to use them in your code without needing to specify their full package.





